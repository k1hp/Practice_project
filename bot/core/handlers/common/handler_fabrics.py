from telebot.states import StatesGroup, State
from telebot import types

from bot.config.config_data import CommonButtons, GameButtons
from bot.config.settings import bot, logger
from bot.core.states.common import RedBlackState, UserState, SaperState
from bot.core.utils.game import OnePlayerSession
from bot.core.utils.helpers import exit_to_navigation

# from bot.core.handlers.game_handlers.red_black_handlers import red_black_handler


def make_exit_to_navigation(state: State):
    """
    –§–∞–±—Ä–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∏–≥—Ä—ã
    :param state:
    :return:
    """

    @bot.message_handler(
        state=state, func=lambda message: message.text == GameButtons.exit
    )
    def handler(message: types.Message):
        exit_to_navigation(message.chat.id)

    return handler


exit_red_black_handler = make_exit_to_navigation(state=RedBlackState.balance)
exit_saper_handler_1 = make_exit_to_navigation(state=SaperState.balance)
exit_saper_handler_2 = make_exit_to_navigation(state=SaperState.bombs)


def make_start_offline_game(
    current_state: State, need_state: State, check_button: str, start_text: str
):
    """
    –§–∞–±—Ä–∏–∫–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∞—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã,
    –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –∫–æ–ª—å—Ü–µ–≤—ã–º–∏,
    –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ—á–µ—Ç –∏–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞.

    :param current_state:
    :param need_state:
    :param check_button:
    :param start_text:
    :return:
    """

    @bot.message_handler(
        state=current_state,
        func=lambda message: message.text == check_button,
    )
    def handler(message: types.Message):
        with bot.retrieve_data(message.chat.id) as data:
            deposit = data.get("deposit")
        OnePlayerSession(
            bot,
            message=message,
            game_state=need_state,
            start_text="–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º ü§ë" if deposit else start_text,
        )

    return handler


start_red_black_handler = make_start_offline_game(
    current_state=UserState.games,
    need_state=RedBlackState.balance,
    check_button=CommonButtons.games["red_black"],
    start_text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞, —Å—Ç–∞–≤—å—Ç–µ –Ω–∞ —á—Ç–æ —É–≥–æ–¥–Ω–æ.\n{GameButtons.red_black["red"]} {GameButtons.red_black["black"]} x2\n{GameButtons.red_black["green"]} x15",
)
start_saper_handler = make_start_offline_game(
    current_state=UserState.games,
    need_state=SaperState.balance,
    check_button=CommonButtons.games["saper"],
    start_text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\nüçÄ –ß–µ–º –±–æ–ª—å—à–µ –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫ –æ—Ç–∫—Ä–æ–µ—à—å, —Ç–µ–º –±–æ–ª—å—à–µ –≤—ã–∏–≥—Ä—ã—à.\nüí£ –ï—Å–ª–∏ –Ω–∞—Ç–∫–Ω–µ—à—å—Å—è –Ω–∞ –±–æ–º–±—É, —Ç–æ –≤—Å–µ –ø–æ—Ç–µ—Ä—è–µ—à—å.\nü§Ø –£–¥–∞—á–∏.",
)


def make_continue_handlers(state: State, called_function):
    """
    –§–∞–±—Ä–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤,
    –∫–æ—Ç–æ—Ä—ã–µ –ª–∏–±–æ –ø—Ä–µ–∫—Ä–∞—â–∞—é—Ç –∏–≥—Ä—É,
    –ª–∏–±–æ –Ω–∞—á–∏–Ω–∞—é—Ç —Ç–∞–∫—É—é –∂–µ –Ω–æ–≤—É—é.
    :param state:
    :param called_function:
    :return:
    """

    @bot.message_handler(
        state=state,
        func=lambda message: message.text in GameButtons.continue_game.values(),
    )
    def handler(message: types.Message):
        if message.text == GameButtons.continue_game["accept"]:
            called_function(message)
            return
        exit_to_navigation(message.chat.id)

    return handler


continue_red_black_handler = make_continue_handlers(
    state=RedBlackState.game_process, called_function=start_red_black_handler
)
continue_saper_handler = make_continue_handlers(
    state=SaperState.game_process, called_function=start_saper_handler
)
